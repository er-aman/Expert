import unittest
def getClosedIslands(grid):
  if len(grid)==0:
    return 0
  def fill(grid,i,j):
    directions =[(-1,0),(0,-1),(1,0),(0,1)]
    if not (0<=i<len(grid) and 0<=j<len(grid[0]) and grid[i][j]==0):
      return False
    grid[i][j]=-1
    for m,n in directions:
      fill(grid,i+m,j+n)
    return True
  
  for j in range(len(grid[0])):
    fill(grid,0,j)
    fill(grid,len(grid)-1,j)
  
  for i in range(len(grid)):
    fill(grid,i,0)
    fill(grid,i,len(grid[0])-1)
  
  result =0
  for i in range(1,len(grid)-1):
    for j in range(1,len(grid[0])-1):
      if fill(grid,i,j):
        result+=1
  
  return result
  
class Test(unittest.TestCase):
  def test_empty_grid(self):
    actual = getClosedIslands([])
    expected = 0
    self.assertEqual(actual,expected)
  
  def test_one(self):
    actual = getClosedIslands([[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]])
    expected =1
    self.assertEqual(actual,expected)

unittest.main(verbosity=2)
