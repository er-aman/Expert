def search(board, words):
	trie = Trie()
	for word in words:
		trie.add(word)
	words=set()
	visited =[[False for i in row] for row in board]
	for i in range(len(board)):
		for j in range(len(board[i])):
			searchHelper(i,j,trie.root,board,visited,words)
	return list(words)

def searchHelper(i,j,trie,board,visited,words):
	directions =[(-1,0),(0,-1),(1,0),(0,1),(-1,-1),(-1,1),(1,-1),(1,1)]
	if visited[i][j]:
		return
	curChar = board[i][j]
	if curChar not in trie:
		return 
	visited[i][j] = True
	trie= trie[curChar]
	if "*" in trie:
		words.add(trie["*"])
	for row,col in directions:
		new_row= row + i 
		new_col = col + j
		if 0<=new_row<len(board) and 0<=new_col<len(board[0]):
			searchHelper(new_row,new_col,trie,board,visited,words)
	visited[i][j]=False
	

class Trie:
	def __init__(self):
		self.root = {}
		self.endWord="*"
		
	def add(self,word):
		trie= self.root
		for letter in word:
			if letter not in trie:
				trie[letter] = {}
			trie=trie[letter]
		trie[self.endWord] = word

board=[
    ['c', 'y', 'm'],
    ['r','a','n'],
    ['l','x','t'],
  ]
words = ['my', 'cat', 'ran', 'away']     
print(search(board,words))    
