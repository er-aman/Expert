def boggleBoard(board, words):
    # Write your code here.
	trie = Trie()
	for word in words:
		trie.add(word)
	
	finalWords = set()
	visited = [[False for letter in row] for row in board]
	
	for i in range(len(board)):
		for j in range(len(board[0])):
			explore(i,j,board, trie.root, visited,finalWords)
	return list(finalWords)
def explore(i,j,board,trieNode,visited, finalWords):
	if visited[i][j]:
		return 
	char = board[i][j]
	if char not in trieNode:
		return
	visited[i][j] = True
	trieNode = trieNode[char]
	if '*' in trieNode:
		finalWords.add(trieNode["*"])
	neighbors = getNeighbors(board,i,j)
	for n in neighbors:
		explore(n[0],n[1],board,trieNode,visited,finalWords)
	visited[i][j]=False
def getNeighbors(board,i,j):
	res=[]
	directions = [(1,0),(0,1),(-1,0),(0,-1),(-1,-1),(-1,1),(1,-1),(1,1)]
	for m,n in directions:
		if 0<=(i+m)<len(board) and 0<=(j+n)<len(board[0]):
			res.append([i+m,j+n])
	return res
class Trie:
	def __init__(self):
		self.root = {}
		self.endSymbol="*"
	
	def add(self,word):
		trie= self.root
		for char in word:
			if char not in trie:
				trie[char]={}
			else:
				trie= trie[char]
		trie[self.endSymbol]=word
	
