[8,12,2,3,15,5,7] ans 8+12+15 = 35

make a copy of an array of same length

sum => [8,20,2,5,[23,35 repace 23 with 35 same thing with 2,and 3 for suming with 15], 

new arr=> we gonna store the index of previous no. in increasing seq. that ends at that index.
        [None, None None.........]
        
        [None,0,None,2,1,3,5]
                 0<-1<-4
                 8 12 15 = 35
       
cur_num = arr[i]  other num arr[j] -> 0<=j<i
                  if otherNum < currNum
                  and if sums[j] + curNu
                  
space O(n) time is O(n**2)

def maxSumIncreasingSubsequence(array):
  sequences = [None for _ in array]
	sums =array[:]
	maxSumIdx = 0
	for i in range(len(array)):
		cur_num = array[i]
		for j in range(0,i):
			other_num = array[j]
			if other_num<cur_num and sums[j]+ cur_num >= sums[i]:
				sums[i]= sums[j]+ cur_num
				sequences[i]=j
		if sums[i]>= sums[maxSumIdx]:
			maxSumIdx = i
	return [sums[maxSumIdx], buildSequence(array,sequences,maxSumIdx)]

def buildSequence(array,sequences,currentIdx):
	sequence=[]
	while currentIdx is not None:
		sequence.append(array[currentIdx])
		currentIdx = sequences[currentIdx]
	return list(reversed(sequence))
