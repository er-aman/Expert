Given an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.

Follow up:

A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]

Time o(n*m) space is O(1)
class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        
        r=len(matrix)
        c=len(matrix[0])
        col_zero= False
        for i in range(r):
            if matrix[i][0]==0:
                col_zero= True
            
            for j in range(1,c):
                if matrix[i][j]==0:
                    matrix[0][j]=0
                    matrix[i][0]=0
            
        for i in range(1,r):
            for j in range(1,c):
                if not matrix[i][0] or not matrix[0][j]:
                    matrix[i][j]=0
        
        if matrix[0][0] ==0:
            for i in range(c):
                matrix[0][i]=0
        
        if col_zero:
            for i in range(r):
                matrix[i][0]=0
