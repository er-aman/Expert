"""   0 1 2 3 4 5 5 6 7 8 9 10
[]    0 0 0 0 0 0 0 0 0 0 0 0
[1,2] 0 0 1 1 1 1 1 1 1 1 1 1 
[4,3] 0 0 1 4 4 4 4 4 4 4 4 4
[5,6] 0 0 1 4 4 4 4 5 5 9 9 9 
[6,7] 
                          7-6=1=> 0 + 5
						  8-6=2=> 4+ 5 =9
						  10-7=3=> 4 + 6=10
array[i-1][j], array[i-1][j-w]+v
 
1) chck curwt is < the curCap: 
2) in case of fit i check array[i][j] = max(array[i-1][j], array[i-1][j-w]+v)
"""

def knapsackProblem(items, capacity):
    # Write your code here.
    # return [
    #   10, // total value
    #   [1, 2], // item indices
    # ]
	
	knapsack =[[0 for _ in range(capacity+1)] for _ in range(len(items)+1)]
	for i in range(1,len(knapsack)):
		curWt = items[i-1][1]
		curVal = items[i-1][0]
		for j in range(0,len(knapsack[i])):
			if curWt>j:
				knapsack[i][j]= knapsack[i-1][j]
			else:
				knapsack[i][j]= max(knapsack[i-1][j],knapsack[i-1][j-curWt]+curVal)
	return [knapsack[-1][-1], getSequence(items,knapsack)]

def getSequence(items,knapsack):
	seq=[]
	i = len(knapsack)-1
	j = len(knapsack[i])-1
	while i>0:
		if knapsack[i][j]==knapsack[i-1][j]:
			i-=1
		else:
			seq.append(i-1)
			j-=items[i-1][1]
			i-=1
		if j==0:
			break
	return list(reversed(seq))
				
