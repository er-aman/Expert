def combineAll(data):
  flattend_dict = {}
  for i in range(len(data)):
    combineAllHelper(data[i],flattend_dict)
  flattend_dict = sorted(flattend_dict.items(),key =lambda k:k[0])
  res={}
  for key,val in flattend_dict:
    res[key]= val
  return res
def combineAllHelper(lookup,flattend_dict):
  for key,val in lookup.items():
    if type(val) != dict and key not in flattend_dict:
      flattend_dict[key]=val
    elif type(val)== dict and key not in flattend_dict:
      flattend_dict[key]=val
    elif type(val)== dict and key in flattend_dict:
      combineAllHelper(lookup[key],flattend_dict[key])

data = [
    {"a": 1, "b": 2, "c": {"d": 4}},  # obj a
    {"c": {"d": 2, "e": 3, "f": 4}, "i": 15},  # obj b
    {"b": 3, "c": {"e": 2, "g": 5}, "h": 10, "k": {"l": {"m": {"n": 12}}}},  # obj c
    {"j": 20, "k": {"l": {"m": {"n": 15, "o": 13}, "p": 18}}},  # obj d
]
print(combineAll(data))



# Sorted by priority from highest to lowest
# raguilaralej@paloaltonetworks.com
#raguilaralej@paloaltonetworks.com
data = [
    {"a": 1, "b": 2, "c": {"d": 4}},  # obj a
    {"c": {"d": 2, "e": 3, "f": 4}, "i": 15},  # obj b
    {"b": 3, "c": {"e": 2, "g": 5}, "h": 10, "k": {"l": {"m": {"n": 12}}}},  # obj c
    {"j": 20, "k": {"l": {"m": {"n": 15, "o": 13}, "p": 18}}},  # obj d
]

# Expected output
expected = {
    "a": 1,  # from obj a
    "b": 2,  # from obj a
    "c": {  # output["c"] will always be a mapping
        "d": 4,  # from obj a
        "e": 3,  # from obj b
        "f": 4,  # from obj b
        "g": 5,  # from obj c
    },
    "h": 10,  # from obj c
    "i": 15,  # from obj b
    "j": 20,  # from obj d
    "k": {  # output["k"] will always be a mapping
        "l": {  # output["k"]["l"] will always be a mapping
            "m": {  # output["k"]["l"]["m"] will always be a mapping
                "n": 12,  # from obj c
                "o": 13,  # from obj d
            },
            "p": 18,  # from obj d
        }
    },
}

class Solution:
    """Enter your solution here"""

    def combineAll(self, data):
        if(len(data) == 0):
            return {}
        high = data[0]
        for i in range(1,len(data)):
            high = self.combineTwo(high,data[i])
        return high
        #raise NotImplementedError("todo")
    
    def combineAllHelper(self, obj, res):
        for key, val in obj.items():
            if type(val) != dict and key not in res:
                res[key] = val
            elif type(val) == dict and key not in res:
                res[key] = val
            elif type(val) == dict and key in res:
                self.combineAllHelper(obj[key],res[key])
 
    def combineTwo(self, hi, lo):
        if(len(hi) == 0 and len(lo) == 0):
            return {}

        self.combineAllHelper(lo,hi)
        
        flattend_dict = sorted(hi.items(),key =lambda k:k[0])
        res={}
        for key,val in flattend_dict:
          res[key]= val
        #print(res)
        return res
    
     

# TEST SUITE
def main():
    print("run tests...")

    sol = Solution()

    # test 2-way merge with empty data
    assert sol.combineTwo({}, {}) == {}

    # test 2-way merge with partially empty data
    one = {"a": 1, "c": 3}
    assert sol.combineTwo(one, {}) == one
    assert sol.combineTwo({}, one) == one

    # test 2-way merge with no overlap
    hi = {"a": 1, "c": 3}
    lo = {"b": 2, "d": 4}
    result = sol.combineTwo(hi, lo)
    assert result == {"a": 1, "b": 2, "c": 3, "d": 4}

    # test 2-way merge with overlap
    hi = {"a": 1, "b": 2}
    lo = {"a": 3, "c": 3}
    result = sol.combineTwo(hi, lo)
    assert result == {"a": 1, "b": 2, "c": 3}

    # test 2-way merge with overlap + nesting
    hi = {"a": {"b": {"c": 1}}}
    lo = {"a": {"b": {"c": 2}}, "d": 2}
    result = sol.combineTwo(hi, lo)
    assert result == {"a": {"b": {"c": 1}}, "d": 2}

    # test n-way merge with empty data
    result = sol.combineAll([])
    assert result == {}

    # test n-way merge with overlap
    result = sol.combineAll([{"a": 1, "b": 1}, {"b": 2, "c": 2}, {"c": 3, "d": 3}])
    assert result == {"a": 1, "b": 1, "c": 2, "d": 3}

    # test n-way merge with repeated overlap
    result = sol.combineAll([{"a": i, "b": i, "c": i, "d": i} for i in range(1000)])
    assert result == {"a": 0, "b": 0, "c": 0, "d": 0}

    # test n-way merge with overlap + nesting
    result = sol.combineAll(data)
    assert result == expected

    print("tests finished.")


if __name__ == "__main__":
    main()
